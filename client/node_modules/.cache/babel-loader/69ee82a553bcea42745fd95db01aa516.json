{"ast":null,"code":"var _jsxFileName = \"/Users/michellehu/ii-react/client/src/containers/AdminPage/AdminPage.js\";\nimport React, { Component } from 'react';\nimport classes from './AdminPage.module.css';\nimport CertificationCard from '../../components/AdminPage/CertificationCard/CertificationCard';\nimport EventCard from '../../components/AdminPage/EventCard/EventCard';\nimport Button from '../../components/shared/Button/Button';\nimport EventModal from '../../components/AdminPage/EventModal/EventModal';\nimport { fetchData } from '../../services/AdminService';\n\nclass AdminPage extends Component {\n  constructor() {\n    super();\n\n    this.loadData = () => {\n      fetchData().then(data => {\n        this.setState({\n          pastEvents: data.pastEvents,\n          upcomingEvents: data.upcomingEvents,\n          interpreters: data.toValidate\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      pastEvents: [],\n      upcomingEvents: [],\n      interpreters: []\n    };\n    this.loadData = this.loadData.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const toValidateCertificates = this.state.interpreters.map(interpreter => interpreter.unvalidatedCertificates.map(certificate => React.createElement(CertificationCard, {\n      key: `${certificate.id}`,\n      id: certificate.id,\n      avatar: interpreter.avatar,\n      name: interpreter.name,\n      title: certificate.title,\n      location: interpreter.location,\n      certificateImage: certificate.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })));\n    const pastEvents = this.state.pastEvents.map(event => {\n      return React.createElement(EventCard, {\n        id: event.id,\n        key: `event-${event.id}`,\n        title: event.title,\n        date: event.date,\n        location: event.location,\n        summary: event.summary,\n        image: event.image,\n        past: true,\n        reloadData: this.loadData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    });\n    const upcomingEvents = this.state.upcomingEvents.map(event => {\n      return React.createElement(EventCard, {\n        id: event.id,\n        key: `event-${event.id}`,\n        title: event.title,\n        date: event.date,\n        location: event.location,\n        summary: event.summary,\n        image: event.image,\n        reloadData: this.loadData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: classes.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Upcoming Events\"), upcomingEvents.length ? upcomingEvents : React.createElement(\"div\", {\n      className: classes.noEvents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"There Is No Event Coming Up.\"), React.createElement(\"div\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Past Events\"), pastEvents.length ? pastEvents : React.createElement(\"div\", {\n      className: classes.noEvents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"There Is No Past Event To Show.\"), React.createElement(\"div\", {\n      className: classes.buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Button, {\n      content: \"Manage All Events\",\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(EventModal, {\n      reloadData: this.loadData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: classes.horzLine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"New Certification Uploads\"), toValidateCertificates);\n  }\n\n}\n\nexport default AdminPage;","map":{"version":3,"sources":["/Users/michellehu/ii-react/client/src/containers/AdminPage/AdminPage.js"],"names":["React","Component","classes","CertificationCard","EventCard","Button","EventModal","fetchData","AdminPage","constructor","loadData","then","data","setState","pastEvents","upcomingEvents","interpreters","toValidate","catch","error","console","log","state","bind","componentDidMount","render","toValidateCertificates","map","interpreter","unvalidatedCertificates","certificate","id","avatar","name","title","location","image","event","date","summary","Container","length","noEvents","buttons","horzLine"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './AdminPage.module.css'\n\nimport CertificationCard from '../../components/AdminPage/CertificationCard/CertificationCard';\nimport EventCard from '../../components/AdminPage/EventCard/EventCard';\nimport Button from '../../components/shared/Button/Button';\nimport EventModal from '../../components/AdminPage/EventModal/EventModal';\n\nimport { fetchData } from '../../services/AdminService';\n\nclass AdminPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pastEvents: [],\n            upcomingEvents: [],\n            interpreters: []\n        }\n\n        this.loadData = this.loadData.bind(this);\n    }\n\n    loadData = () => {\n        fetchData()\n            .then(data => {\n                this.setState({\n                    pastEvents: data.pastEvents,\n                    upcomingEvents: data.upcomingEvents,\n                    interpreters: data.toValidate\n                })\n            }).catch(error => {\n                console.log(error);\n            })\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    render() {\n        const toValidateCertificates = this.state.interpreters.map(interpreter => (\n            interpreter.unvalidatedCertificates.map(certificate => (\n                <CertificationCard key={`${certificate.id}`}\n                    id={certificate.id}\n                    avatar={interpreter.avatar}\n                    name={interpreter.name}\n                    title={certificate.title}\n                    location={interpreter.location}\n                    certificateImage={certificate.image} />\n            ))\n        ))\n        const pastEvents = this.state.pastEvents.map(event => {\n            return <EventCard id={event.id}\n                key={`event-${event.id}`}\n                title={event.title}\n                date={event.date}\n                location={event.location}\n                summary={event.summary}\n                image={event.image}\n                past\n                reloadData={this.loadData} />\n        })\n        const upcomingEvents = this.state.upcomingEvents.map(event => {\n            return <EventCard id={event.id}\n                key={`event-${event.id}`}\n                title={event.title}\n                date={event.date}\n                location={event.location}\n                summary={event.summary}\n                image={event.image}\n                reloadData={this.loadData} />\n        })\n\n        return (\n            <div className={classes.Container}>\n                <div className={classes.title}>Upcoming Events</div>\n                {upcomingEvents.length ? upcomingEvents : <div className={classes.noEvents}>There Is No Event Coming Up.</div>}\n\n                <div className={classes.title}>Past Events</div>\n                {pastEvents.length ? pastEvents : <div className={classes.noEvents}>There Is No Past Event To Show.</div>}\n\n                <div className={classes.buttons}>\n                    <Button content='Manage All Events' inverted />\n                    <EventModal reloadData={this.loadData} />\n                </div>\n\n                <div className={classes.horzLine} />\n\n                <div className={classes.title}>New Certification Uploads</div>\n\n                {toValidateCertificates}\n            </div >\n        )\n    }\n}\n\nexport default AdminPage;\n\n"]},"metadata":{},"sourceType":"module"}